SourceFile
└─ FunctionDeclaration(main)
   ├─ returnType: TypeReference
   │              └─ Identifier(i64)
   └─ Block
      ├─ LetStatement(width)
      │  ├─ type: Null
      │  └─ expression: NumericLiteral(5)
      ├─ LetStatement(height)
      │  ├─ type: Null
      │  └─ expression: NumericLiteral(10)
      ├─ LetStatement(map)
      │  ├─ type: TypeReference
      │  │        ├─ Identifier(Pointer)
      │  │        └─ TypeReference
      │  │           ├─ Identifier(Pointer)
      │  │           └─ TypeReference
      │  │              └─ Identifier(string)
      │  └─ expression: CallExpression(allocate)
      │                 └─ BinaryExpression(Asterisk)
      │                    ├─ lhs: NumericLiteral(8)
      │                    └─ rhs: Identifier(height)
      ├─ ForStatement
      │  ├─ initializer: LetStatement(y)
      │  │               ├─ type: Null
      │  │               └─ expression: NumericLiteral(0)
      │  ├─ condition: BinaryExpression(LessThan)
      │  │             ├─ lhs: Identifier(y)
      │  │             └─ rhs: Identifier(height)
      │  ├─ incrementer: BinaryExpression(PlusEquals)
      │  │               ├─ lhs: Identifier(y)
      │  │               └─ rhs: NumericLiteral(1)
      │  ├─ body: Block
      │  │        ├─ ExpressionStatement
      │  │        │  └─ expression: BinaryExpression(Equals)
      │  │        │                 ├─ lhs: ElementAccessExpression
      │  │        │                 │       ├─ expression: Identifier(map)
      │  │        │                 │       └─ argument: Identifier(y)
      │  │        │                 └─ rhs: CallExpression(allocate)
      │  │        │                         └─ BinaryExpression(Asterisk)
      │  │        │                            ├─ lhs: NumericLiteral(8)
      │  │        │                            └─ rhs: Identifier(width)
      │  │        └─ ForStatement
      │  │           ├─ initializer: LetStatement(x)
      │  │           │               ├─ type: Null
      │  │           │               └─ expression: NumericLiteral(0)
      │  │           ├─ condition: BinaryExpression(LessThan)
      │  │           │             ├─ lhs: Identifier(x)
      │  │           │             └─ rhs: Identifier(width)
      │  │           ├─ incrementer: BinaryExpression(PlusEquals)
      │  │           │               ├─ lhs: Identifier(x)
      │  │           │               └─ rhs: NumericLiteral(1)
      │  │           ├─ body: Block
      │  │           │        └─ ExpressionStatement
      │  │           │           └─ expression: BinaryExpression(Equals)
      │  │           │                          ├─ lhs: ElementAccessExpression
      │  │           │                          │       ├─ expression: ElementAccessExpression
      │  │           │                          │       │              ├─ expression: Identifier(map)
      │  │           │                          │       │              └─ argument: Identifier(y)
      │  │           │                          │       └─ argument: Identifier(x)
      │  │           │                          └─ rhs: BinaryExpression(Plus)
      │  │           │                                  ├─ lhs: BinaryExpression(Plus)
      │  │           │                                  │       ├─ lhs: BinaryExpression(Plus)
      │  │           │                                  │       │       ├─ lhs: BinaryExpression(Plus)
      │  │           │                                  │       │       │       ├─ lhs: StringLiteral(()
      │  │           │                                  │       │       │       └─ rhs: Identifier(x)
      │  │           │                                  │       │       └─ rhs: StringLiteral(,)
      │  │           │                                  │       └─ rhs: Identifier(y)
      │  │           │                                  └─ rhs: StringLiteral())
      ├─ ForStatement
      │  ├─ initializer: LetStatement(y)
      │  │               ├─ type: Null
      │  │               └─ expression: NumericLiteral(0)
      │  ├─ condition: BinaryExpression(LessThan)
      │  │             ├─ lhs: Identifier(y)
      │  │             └─ rhs: Identifier(height)
      │  ├─ incrementer: BinaryExpression(PlusEquals)
      │  │               ├─ lhs: Identifier(y)
      │  │               └─ rhs: NumericLiteral(1)
      │  ├─ body: Block
      │  │        └─ ForStatement
      │  │           ├─ initializer: LetStatement(x)
      │  │           │               ├─ type: Null
      │  │           │               └─ expression: NumericLiteral(0)
      │  │           ├─ condition: BinaryExpression(LessThan)
      │  │           │             ├─ lhs: Identifier(x)
      │  │           │             └─ rhs: Identifier(width)
      │  │           ├─ incrementer: BinaryExpression(PlusEquals)
      │  │           │               ├─ lhs: Identifier(x)
      │  │           │               └─ rhs: NumericLiteral(1)
      │  │           ├─ body: Block
      │  │           │        └─ ExpressionStatement
      │  │           │           └─ expression: CallExpression(print)
      │  │           │                          └─ ElementAccessExpression
      │  │           │                             ├─ expression: ElementAccessExpression
      │  │           │                             │              ├─ expression: Identifier(map)
      │  │           │                             │              └─ argument: Identifier(y)
      │  │           │                             └─ argument: Identifier(x)
      └─ ReturnStatement
         └─ expression: NumericLiteral(0)
