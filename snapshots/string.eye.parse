SourceFile
├─ FunctionDeclaration(cleanUpRegistersForGC)
│  ├─ Parameter(a)
│  │  └─ TypeReference
│  │     └─ Identifier(i64)
│  ├─ Parameter(b)
│  │  └─ TypeReference
│  │     └─ Identifier(i64)
│  ├─ Parameter(c)
│  │  └─ TypeReference
│  │     └─ Identifier(i64)
│  ├─ Parameter(d)
│  │  └─ TypeReference
│  │     └─ Identifier(i64)
│  ├─ Parameter(e)
│  │  └─ TypeReference
│  │     └─ Identifier(i64)
│  ├─ returnType: TypeReference
│  │              └─ Identifier(i64)
│  └─ Block
│     └─ ReturnStatement
│        └─ expression: BinaryExpression(Plus)
│                       ├─ lhs: BinaryExpression(Plus)
│                       │       ├─ lhs: BinaryExpression(Plus)
│                       │       │       ├─ lhs: BinaryExpression(Plus)
│                       │       │       │       ├─ lhs: Identifier(a)
│                       │       │       │       └─ rhs: Identifier(b)
│                       │       │       └─ rhs: Identifier(c)
│                       │       └─ rhs: Identifier(d)
│                       └─ rhs: Identifier(e)
└─ FunctionDeclaration(main)
   ├─ returnType: TypeReference
   │              └─ Identifier(i64)
   └─ Block
      ├─ LetStatement(s1)
      │  ├─ type: Null
      │  └─ expression: StringLiteral(Hello,)
      ├─ LetStatement(s2)
      │  ├─ type: Null
      │  └─ expression: StringLiteral( World)
      ├─ ExpressionStatement
      │  └─ expression: CallExpression(print)
      │                 └─ BinaryExpression(Plus)
      │                    ├─ lhs: BinaryExpression(Plus)
      │                    │       ├─ lhs: Identifier(s1)
      │                    │       └─ rhs: Identifier(s2)
      │                    └─ rhs: StringLiteral(!)
      ├─ LetStatement(_)
      │  ├─ type: Null
      │  └─ expression: CallExpression(cleanUpRegistersForGC)
      │                 ├─ NumericLiteral(1)
      │                 ├─ NumericLiteral(2)
      │                 ├─ NumericLiteral(3)
      │                 ├─ NumericLiteral(4)
      │                 └─ NumericLiteral(5)
      └─ ReturnStatement
         └─ expression: NumericLiteral(0)
