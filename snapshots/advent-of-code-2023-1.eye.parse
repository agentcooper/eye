SourceFile
├─ FunctionDeclaration(isDigit)
│  ├─ Parameter(c)
│  │  └─ TypeReference
│  │     └─ Identifier(char)
│  ├─ returnType: TypeReference
│  │              └─ Identifier(boolean)
│  └─ Block
│     └─ ReturnStatement
│        └─ expression: BinaryExpression(AmpersandAmpersand)
│                       ├─ lhs: BinaryExpression(GreaterThanEquals)
│                       │       ├─ lhs: Identifier(c)
│                       │       └─ rhs: CharLiteral(0)
│                       └─ rhs: BinaryExpression(LessThanEquals)
│                               ├─ lhs: Identifier(c)
│                               └─ rhs: CharLiteral(9)
├─ FunctionDeclaration(match)
│  ├─ Parameter(s)
│  │  └─ TypeReference
│  │     └─ Identifier(string)
│  ├─ Parameter(start)
│  │  └─ TypeReference
│  │     └─ Identifier(i64)
│  ├─ Parameter(query)
│  │  └─ TypeReference
│  │     └─ Identifier(string)
│  ├─ returnType: TypeReference
│  │              └─ Identifier(boolean)
│  └─ Block
│     ├─ ForStatement
│     │  ├─ initializer: LetStatement(i)
│     │  │               ├─ type: Null
│     │  │               └─ expression: NumericLiteral(0)
│     │  ├─ condition: BinaryExpression(LessThan)
│     │  │             ├─ lhs: Identifier(i)
│     │  │             └─ rhs: CallExpression(string_length)
│     │  │                     └─ Identifier(query)
│     │  ├─ incrementer: BinaryExpression(PlusEquals)
│     │  │               ├─ lhs: Identifier(i)
│     │  │               └─ rhs: NumericLiteral(1)
│     │  ├─ body: Block
│     │  │        └─ IfStatement
│     │  │           ├─ condition: BinaryExpression(ExclamationMarkEquals)
│     │  │           │             ├─ lhs: ElementAccessExpression
│     │  │           │             │       ├─ expression: Identifier(s)
│     │  │           │             │       └─ argument: BinaryExpression(Plus)
│     │  │           │             │                    ├─ lhs: Identifier(start)
│     │  │           │             │                    └─ rhs: Identifier(i)
│     │  │           │             └─ rhs: ElementAccessExpression
│     │  │           │                     ├─ expression: Identifier(query)
│     │  │           │                     └─ argument: Identifier(i)
│     │  │           └─ ifTrue: Block
│     │  │                      └─ ReturnStatement
│     │  │                         └─ expression: BooleanLiteral(false)
│     └─ ReturnStatement
│        └─ expression: BooleanLiteral(true)
├─ FunctionDeclaration(parseDigit)
│  ├─ Parameter(s)
│  │  └─ TypeReference
│  │     └─ Identifier(string)
│  ├─ Parameter(index)
│  │  └─ TypeReference
│  │     └─ Identifier(i64)
│  ├─ Parameter(parseStringDigits)
│  │  └─ TypeReference
│  │     └─ Identifier(boolean)
│  ├─ returnType: TypeReference
│  │              └─ Identifier(i64)
│  └─ Block
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(isDigit)
│     │  │             └─ ElementAccessExpression
│     │  │                ├─ expression: Identifier(s)
│     │  │                └─ argument: Identifier(index)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: CallExpression(char_to_i64)
│     │                               └─ ElementAccessExpression
│     │                                  ├─ expression: Identifier(s)
│     │                                  └─ argument: Identifier(index)
│     ├─ IfStatement
│     │  ├─ condition: UnaryExpression(ExclamationMark)
│     │  │             └─ Identifier(parseStringDigits)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: UnaryExpression(Minus)
│     │                               └─ NumericLiteral(1)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(one)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(1)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(two)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(2)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(three)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(3)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(four)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(4)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(five)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(5)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(six)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(6)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(seven)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(7)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(eight)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(8)
│     ├─ IfStatement
│     │  ├─ condition: CallExpression(match)
│     │  │             ├─ Identifier(s)
│     │  │             ├─ Identifier(index)
│     │  │             └─ StringLiteral(nine)
│     │  └─ ifTrue: Block
│     │             └─ ReturnStatement
│     │                └─ expression: NumericLiteral(9)
│     └─ ReturnStatement
│        └─ expression: UnaryExpression(Minus)
│                       └─ NumericLiteral(1)
└─ FunctionDeclaration(main)
   ├─ returnType: TypeReference
   │              └─ Identifier(i64)
   └─ Block
      ├─ LetStatement(parseStringDigits)
      │  ├─ type: Null
      │  └─ expression: BooleanLiteral(true)
      ├─ LetStatement(input)
      │  ├─ type: Null
      │  └─ expression: CallExpression(readFile)
      │                 └─ StringLiteral(input/advent-of-code-2023-1.txt)
      ├─ LetStatement(sum)
      │  ├─ type: Null
      │  └─ expression: NumericLiteral(0)
      ├─ LetStatement(firstDigit)
      │  ├─ type: Null
      │  └─ expression: NumericLiteral(0)
      ├─ LetStatement(lastDigit)
      │  ├─ type: Null
      │  └─ expression: NumericLiteral(0)
      ├─ LetStatement(foundFirstDigit)
      │  ├─ type: Null
      │  └─ expression: BooleanLiteral(false)
      ├─ LetStatement(inputLength)
      │  ├─ type: Null
      │  └─ expression: CallExpression(string_length)
      │                 └─ Identifier(input)
      ├─ ForStatement
      │  ├─ initializer: LetStatement(i)
      │  │               ├─ type: Null
      │  │               └─ expression: NumericLiteral(0)
      │  ├─ condition: BinaryExpression(LessThan)
      │  │             ├─ lhs: Identifier(i)
      │  │             └─ rhs: Identifier(inputLength)
      │  ├─ incrementer: BinaryExpression(PlusEquals)
      │  │               ├─ lhs: Identifier(i)
      │  │               └─ rhs: NumericLiteral(1)
      │  ├─ body: Block
      │  │        ├─ LetStatement(c)
      │  │        │  ├─ type: Null
      │  │        │  └─ expression: ElementAccessExpression
      │  │        │                 ├─ expression: Identifier(input)
      │  │        │                 └─ argument: Identifier(i)
      │  │        ├─ LetStatement(digit)
      │  │        │  ├─ type: Null
      │  │        │  └─ expression: CallExpression(parseDigit)
      │  │        │                 ├─ Identifier(input)
      │  │        │                 ├─ Identifier(i)
      │  │        │                 └─ Identifier(parseStringDigits)
      │  │        ├─ IfStatement
      │  │        │  ├─ condition: BinaryExpression(ExclamationMarkEquals)
      │  │        │  │             ├─ lhs: Identifier(digit)
      │  │        │  │             └─ rhs: UnaryExpression(Minus)
      │  │        │  │                     └─ NumericLiteral(1)
      │  │        │  └─ ifTrue: Block
      │  │        │             ├─ IfStatement
      │  │        │             │  ├─ condition: UnaryExpression(ExclamationMark)
      │  │        │             │  │             └─ Identifier(foundFirstDigit)
      │  │        │             │  └─ ifTrue: Block
      │  │        │             │             ├─ ExpressionStatement
      │  │        │             │             │  └─ expression: BinaryExpression(Equals)
      │  │        │             │             │                 ├─ lhs: Identifier(firstDigit)
      │  │        │             │             │                 └─ rhs: Identifier(digit)
      │  │        │             │             └─ ExpressionStatement
      │  │        │             │                └─ expression: BinaryExpression(Equals)
      │  │        │             │                               ├─ lhs: Identifier(foundFirstDigit)
      │  │        │             │                               └─ rhs: BooleanLiteral(true)
      │  │        │             └─ ExpressionStatement
      │  │        │                └─ expression: BinaryExpression(Equals)
      │  │        │                               ├─ lhs: Identifier(lastDigit)
      │  │        │                               └─ rhs: Identifier(digit)
      │  │        └─ IfStatement
      │  │           ├─ condition: BinaryExpression(BarBar)
      │  │           │             ├─ lhs: BinaryExpression(DoubleEquals)
      │  │           │             │       ├─ lhs: Identifier(c)
      │  │           │             │       └─ rhs: CharLiteral(\n)
      │  │           │             └─ rhs: BinaryExpression(DoubleEquals)
      │  │           │                     ├─ lhs: Identifier(i)
      │  │           │                     └─ rhs: BinaryExpression(Minus)
      │  │           │                             ├─ lhs: Identifier(inputLength)
      │  │           │                             └─ rhs: NumericLiteral(1)
      │  │           └─ ifTrue: Block
      │  │                      ├─ ExpressionStatement
      │  │                      │  └─ expression: BinaryExpression(PlusEquals)
      │  │                      │                 ├─ lhs: Identifier(sum)
      │  │                      │                 └─ rhs: BinaryExpression(Plus)
      │  │                      │                         ├─ lhs: BinaryExpression(Asterisk)
      │  │                      │                         │       ├─ lhs: Identifier(firstDigit)
      │  │                      │                         │       └─ rhs: NumericLiteral(10)
      │  │                      │                         └─ rhs: Identifier(lastDigit)
      │  │                      └─ ExpressionStatement
      │  │                         └─ expression: BinaryExpression(Equals)
      │  │                                        ├─ lhs: Identifier(foundFirstDigit)
      │  │                                        └─ rhs: BooleanLiteral(false)
      ├─ ExpressionStatement
      │  └─ expression: CallExpression(print)
      │                 └─ Identifier(sum)
      └─ ReturnStatement
         └─ expression: NumericLiteral(0)
